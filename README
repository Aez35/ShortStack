SYNOPSIS
    Annotation and quantification of small RNA genes based upon
    reference-aligned small RNA sequences

CITATION
    If you use ShortStack in your work, please cite

    Axtell MJ. (2013) ShortStack: Comprehensive annotation and
    quantification of small RNA genes. RNA. doi:10.1261/rna.035279.112

VERSION
    0.4.3 :: Released April 24, 2013

AUTHOR
    Michael J. Axtell, Penn State University, mja18@psu.edu

INSTALL
    install samtools from <http://samtools.sourceforge.net/> and ensure that
    samtools is in your PATH

    install the ViennaRNA package (either 1.8.x or 2.x). See
    <http://www.tbi.univie.ac.at/~ronny/RNA/vrna2.html> and ensure that
    RNALfold and RNAeval are in your PATH

    ensure the script is executable

        chmod +x ShortStack.pl                                                         
                                                                                                 
    ensure the script is in your PATH (examples):

        sudo cp ShortStack.pl /usr/bin/                                                
                                                                                                 
    OR just for one session assuming script is in your working directory:

        PATH=$PATH:.                                                                                 
                                                                                                 
    ensure 'perl' is located in /usr/bin/ .. if not, edit line 1 of script
    accordingly

USAGE
            Shortstack.pl [options] [in.bam] [genome.fasta] 

QUICK START
    1. Install ShortStack.pl and Prep_bam.pl, and required third-party tools
    (RNALfold, samtools) per above instructions

    2. Trim your raw reads to remove adapters. The Axtell Lab has some
    scripts for trimming 3' adapters from typical raw small RNA-seq data.
    (see http://axtell-lab-psu.weebly.com/tools.html)

    3. Ensure the chromosome names of the reference genome are short and
    sweet, containing no whitespace or metacharacters (see below)

    4. Align your reads to the reference genome, output the results in
    sam/bam format, and pipe through 'Prep_bam.pl' to generate a properly
    formatted, sorted, and indexed .bam alignment. Note the total number of
    mapped reads. Suggested aligner is bowtie 1 (0.12.8) but any method that
    outputs in sam/bam format is fine. If you use bowtie version 1, the
    following command can be used for one-step mapping, formatting, sorting,
    and indexing (assuming of course you've installed bowtie and built the
    bowtie index for your reference genome):

            bowtie [bowtie_options] -S [bowtie_genome_index] [trimmed_reads] | Prep_bam.pl --genome [genome.fasta] --prefix [file_name_prefix]

    5. If you use another mapping method besides the one above, the final
    .bam formatted file must be sorted by chromosomal position, have NH:i:
    tags present (see SAM specification), and be indexed with the .bam.bai
    index file in the same directory as the .bam file. In additional, all
    data lines (except those for unmapped reads, which are ignored) must
    have a valid CIGAR string (see SAM specification). Non-conforming .sam
    or .bam files can be processed with 'Prep_bam.pl' -- see the README for
    Prep_bam.pl included with this package.

    6. For a full de-novo run with default parameters, call "Shortstack.pl
    [in.bam] [genome.fasta]". See OPTIONS below for other options and run
    modes.

TUTORIAL
    A full tutorial with sample Arabidopsis data can be found at
    http://axtelldata.bio.psu.edu/data/ShortStack_TestData/

OPTIONS
    --outdir [string] : Name of directory to be created to receive results
    of the run. Deafults to "ShortStack_[time]", where time is the number of
    non-leap seconds since Jan 1, 1970 UCT, if not provided

    --reads [integer] : Number of reads (NOT mappings) in the input .bam
    file. No default. Reads are required to output quantifications in
    mappings per million mapped, instead of in raw rads. If not provided,
    the run will be forced into "--raw" mode, because mappings per million
    mapped reads cannot be calculated.

    --inv_file [string] : PATH to an einverted-produced .inv file of
    inverted repeats within the genome of interest. Not required but
    strongly suggested for more complete annotations of hairpin-derived
    small RNA genes. Default = {blank}. Not needed for runs in "nohp" mode
    or runs in "count" mode (because "count" mode forces "nohp" mode as
    well). A typical eniverted run uses default parameters except
    "-maxrepeat 10000", in order to capture long IRs.

    --flag_file [string] : PATH to a simple file of genomic loci of
    interest. The ShortStack-analyzed small RNA clusters will be analyzed
    for overlap with the loci in the flag_file .. if there is any overlap
    (as little as one nt), it will be reported. Format for this file is
    describe below.

    --mindepth [integer] : Minimum depth of mapping coverage to define an
    'island'. Default = 20. Must be at least 2, more than 5 preferred.

    --pad [integer] : Number of nucleotides upstream and downstream to
    extend initial islands during cluster definition. Default = 100

    --dicermin [integer] : Smallest size in the Dicer size range (or size
    range of interest). Deafult = 20. Must be between 15 and 35, and less
    than or equal to --dicermax

    --dicermax [integer] : Largest size in the Dicer size range (or size
    range of interest). Deafult = 24. Must be between 15 and 35, and more
    than or equal to --dicermin

    --minUI [float] : Minimum uniqueness index required to attempt RNA
    folding. Uniqueness index is defined as repeat-normalized abundance /
    total abundance. Must be a value between 0 and 1. Zero forces all
    clusters to be folded; default: 0.1

    --maxhpsep [integer] : Maximum allowed span for a base-pair during
    hairpin search with RNALfold; Also serves as the maximum size of genomic
    query to fold with RNALfold .. loci whose unpadded size is more than
    --maxhpsep will not be analyzed at all with RNALfold. Default = 300.
    Must be between 50 and 2000.

    --minfracpaired [float] : Minimum fraction of paired nucleotides
    required within a valid hairpin structure. Default = 0.67. Allowed
    values are greater than 0 and less than or equal to 1.

    --minntspaired [integer] : Minimum absolute number of paired nucleotides
    required within a valid hairpin structure. Default = 15. Allowed values
    are greater than zero and less than or equal to --maxhpsep

    --maxdGperStem [float] : Maximum deltaG / stem length allowed in a valid
    hairpin structure. Stem length is 0.5 * (left_stem_length +
    right_stem_length). Default = -0.5

    --minfrachpdepth [float] : Minimum fraction of corrected coverage within
    hairpin arms to keep hairpin for further analysis. Default = 0.67.
    Allowed values between 0 and 1. See below for details.

    --miRType [string] : Either "plant" or "animal". Defaults to "plant".
    This option sets --maxmiRHPPairs, --maxmiRUnpaired, and --maxLoopLength
    to 150, 5, and 100,000 respectively for type "plant". For type "animal",
    the three are instead set to 45, 6, and 15, respectively.

    --maxmiRHPPairs [integer] : Maximum number of base pairs in a valid
    MIRNA hairpin. default: set by --miRType "plant" to 150. --miRType
    "animal" sets to 45 instead. When provided, user settings will override
    miRType settings.

    --maxmiRUnpaired [integer] : Maximum number of unpaired miRNA nts in a
    miRNA/miRNA* duplex. default: set by --miRType "plant" to 5. --miRType
    "animal" instead sets it to 6. When provided, user settings will
    override miRType settings.

    --maxLoopLength [integer] : maximum allowed loop length for a valid
    hairpin. default: set by --miRType "plant" be essentially unlimited
    (100,000). --miRType "plant" sets it to 15. When provided, user settings
    will override miRType settings.

    --minstrandfrac [float] : Minimum fraction of mappings to one or the
    other strand call a polarity for non-hairpin clusters. Also the minimum
    fraction of "non-dyad" mappings to the sense strand within potential
    hairpins/miRNAs to keep the locus annotated as a hp or miRNA. See below
    for details. Default = 0.8. Allowed values between 0.5 and 1.

    --mindicerfrac [float] : Minimum fraction of mappings within Dicer size
    range to annotate a locus as Dicer-derived. Default = 0.85. Allowed
    values between 0 and 1.

    --phasesize [integer] : Examine phasing only for clusters dominated by
    the indicated size range. Size must be within the bounds described by
    --dicermin and --dicermax. Set to 'all' to examine p-values of each
    locus within the Dicer range, in its dominant size. Set to 'none' to
    suppress all phasing analysis. Default = 21. Allowed values between
    --dicermin and --dicermax.

    --count [string] : Invokes count mode, in which user-provided clusters
    are annotated and quantified instead of being defined de novo. When
    invoked, the file provided with --count is assumed to contain a simple
    list of clusters. Count mode also forces nohp mode. Formatting details
    below. Default : Not invoked.

    --nohp : If "--nohp" appears on the command line, it invokes running in
    "no hairpin" mode. RNA folding, hairpin annotation, and MIRNA annotation
    will be skipped (likely saving significant time). Note that --count mode
    forces --nohp mode as well. Default: Not invoked.

    --raw : If "--raw" appears on the command line, it prevents conversion
    of abundances into mappings per million mapped reads, and instead all
    tallies in the results will simply be the raw reads. --raw mode is
    forced if the user does not provide the number of reads via the --reads
    option. Default: Not invoked, unless --reads is left blank.

KEY FORMATTING REQUIREMENTS AND ASSUMPTIONS
  Input .bam file

    The mapped reads in the input .bam file must be sorted by chromosomal
    location, and indexed using the samtools index command -- specifically,
    ShortStack will look for the [prefix].bam.bai file in the same directory
    as the input [prefix].bam file. It will quit and complain if the index
    file is not readable.

    Additionally, each mapping in the .bam file must have the NH:i: tag,
    which indicates the total number of mappings for that read.

    Finally, each mapped read must have the CIGAR string set (column 6 in
    the SAM specification) -- ShortStack.pl determines the small RNA lengths
    by parsing the CIGAR string .. if any mappings (except unmapped reads,
    which are ignored) have "*" entered instead of a valid CIGAR string
    ShortStack.pl will exit and complain.

    Preparation of proper .bam files can be achieved with the helper script,
    "Prep_bam.pl", included as part of the ShortStack package. Prep_bam.pl
    takes in a READ-sorted .bam, .sam, or .sam.gz file and calculates the
    NH:i: tags, and finally outputs a chromosomal-sorted and indexed .bam
    file suitable for use by ShortStack.pl. It will also warn you if any
    CIGAR strings are missing. It can also be used directly to receive and
    process a SAM-formated alignment stream output by bowtie.

    Finally, it is critical that the chromosome names referenced in the .bam
    file correspond exactly to those present in the genome.fasta file.

  Input genome.fasta file

    It is critical that this be the precise genome to which the reads in the
    input .bam file were mapped.

    Additionally, the chromosome names in the FASTA headers must be kept
    SIMPLE. Specifically, ShortStack.pl at several points parses clusters by
    the regex /^(\S+):(\d+)-(\d+)$/ or some variant thereof, where the first
    pattern is the chromosome name. Therefore, the chromosome names must
    match (\S+) .. e.g. a single string of one or more non-white-space
    characters, with no metacharacters. So, ">Chr1" in your reference genome
    is good, but ">Chr1 | XM00023 | this is a bunch of annotation blah blah
    blah" is bad. This same concern applies to the input .bam file, so your
    chromosome names should be shortened BEFORE mapping your reads, so that
    they are short and they are exactly reflected in the .bam file.

    If not already present, a .fai index file for the genome will be created
    using samtools faidx at the beginning of the run.

  --count file

    If running in --count mode, the user-provided file is expected to be a
    simple text file containing a list of coordinates in the format :
    [Chr]:[start]-[stop], where Chr is defined in the genome file AND in the
    .bam file, and start and stop are one-based, inclusive. The same
    requirement for short, non-whitespaced chromosome names as discussed
    above holds true for input --count files. Comment lines, that begin with
    '#', are ignored. Tab-delimited files are also accepted, provided the
    first column has the coordinates. The second column in tab-delimted
    files is assumed to be the names of the clusters, and will be used
    accordingly. Any other columns in a tab-delimited input file are
    ignored.

    Importantly, the 'Results.txt' file produced by a previous ShortStack.pl
    run can be used directly in subsequent runs in --count mode. This is
    useful when comparing identical intervals across multiple samples.

    Note that count mode also forces nohp mode.

  --flag_file

    Optional. This is a list of genomic loci to scan for overlap with one or
    more of the small RNA loci found/analyzed by ShortStack. Overlap of any
    length is reported. The format of the file is similar to that of the
    --count file: A tab-delimited text file with coordinates in the first
    column, and names in the second column. Unlike for --count files, names
    are required to be present in the second column for --flag_file.
    Coordinates must be in the format [Chr]:[start]-[stop], where Chr is
    defined in the genome file AND the .bam file, and start and stop are
    one-based, inclusive.

  --inv_file

    Unless you are running in "nohp" mode, providing a inv_file will enhance
    the accuracy of the hairpin annotations. RNALfold-based folding of
    clusters will often miss very large inverted repeats that einverted can
    capture. To make the .inv file, download and install the EMBOSS package
    ( http://emboss.sourceforge.net/ ), then run einverted against your
    genome of interest. For the purposes of ShortStack analysis, the fasta
    file can be ignored / deleted. The .inv file is used for ShortStack
    analysis. Note that the inv_file is not required, but ShortStack will
    warn you if it is missing (unless you are running in 'nohp' or 'count'
    mode).

SUGGESTIONS FOR ADAPTER-TRIMMING AND ALIGNMENTS
    The results from ShortStack.pl are strongly affected by how the reads
    were processed and aligned. Alignment parameters in particular need to
    be carefully documented, especially with regard to how multi-mapped
    small RNA reads are treated. For instance, if your alignment protocol
    demanded a unique match to the genome, and suppressed results for
    multi-mapped reads, that will strongly influence cluster discovery as
    well as render the comparisons of 'total' and 'rep-total' and
    'unique-mappers' in the results meaningless. There (probably?) is no
    single 'best' method (although I have some suggestions below), but it is
    clear that, for comparison of results from different samples, all
    pre-ShortStack processing steps should be explicit and identical between
    the samples.

    Trimming of adapters, while seemingly mundane and simple, also will have
    profound effects on ShortStack results. For instance, if reads were
    computationally filtered before alignment to only retain those in the
    Dicer size range, than all clusters will be annotated by ShortStack.pl
    as being dominated by Dicer-sized small RNAs. However, because the data
    were selectively used, this may lead to false results.

  Suggestions for Adapter Trimming

    In general, I suggest retaining the broadest possible size range of
    adapter-trimmed reads. In our group, we are typically retaining 15-35nt
    reads for mapping at present. Inputting all reads for alignment will
    allow ShortStack to confidently discern clusters dominated by reads in
    the Dicer size range, from clusters that are not (which will often be
    degradation fragments from abundant RNA species). Of course, the range
    of small RNA sizes will also be dictated by the library construction
    method used, but my suggestion is that a broad size range is preferable
    in order to allow confident discrimination of Dicer-derived clusters
    from non-Dicer-derived clusters.

  Suggestions for Pre-Filtering

    In short, I suggest avoiding any pre-filtering of the small RNAs prior
    to alignment. Pre-filtering is often used to remove reads mapped to
    rRNAs, tRNAs, and other abundant RNA species that frequently generate a
    lot of small RNAs that are not thought to be Dicer-derived. Because
    ShortStack discriminates clusters based on the sizes, clusters formed by
    non-Dicer processes will be readily apparent. In addition, there is
    evidence that some tRNA and snoRNA-derived fragments might be
    biologically meaningful, instead of just random degradation ... so
    throwing out those data altogether does not seem like the best idea.

  Suggestions for Multi-mapped Reads

    In many species, particularly plants, a great deal of small RNAs
    correspond to repetitive genomic sequences, so in general it seems
    imprudent to discard multi-mapped reads. Because ShortStack.pl will
    report the total alignments within a cluster, the total alignments from
    uniquely-mapped small RNAs, and the repeat-normalized total alignments,
    the 'repetitiveness' of each cluster should be readily apparent. So in
    general I advocate for alignment parameters that retain multi-mapped
    reads in all possible positions (e.g. all mappings for the given read).
    However, there is a practical limit where storing huge numbers of
    alignments for a single read becomes prohibitive in terms of file size.
    We generally cap the number of allowed mappings for any one read to 50
    .. e.g., report only the 1st 50 alignments for a single read. (In bowtie
    1, this would be -k 50).

OUTPUT
  Results.txt

    This is a simple tab-delimited text file. The first line begins with a
    "#" (comment) sign, and then lists column headers. Each subsequent line
    describes the key traits of a single cluster.

    To import this into R, here's a tip to deal with the first line, which
    has the headers but begins with a "#" character.

            >results <- read.table("Results.txt", head=TRUE, sep="\t", comment.char="")

    Column 1: Locus : The genome-browser-friendly coordinates of the
    clusters. Coordinates are one-based, inclusive (e.g. Chr1:1-100 refers
    to a 100 nt interval beginning with nt 1 and ending with nt 100).

    Column 2: Name : Name of cluster. Unless the run was in --count mode and
    the input file of a priori clusters already had names, the names are
    arbitrarily designated as "Cluster_1", "Cluster_2", etc.

    Column 3: FlagOverlap : Name(s) of any loci from the flag_file that
    overlap with the cluster are listed. If there are two or more, they are
    comma-separated. If there were none, or no flag_file was provided, than
    a "." is present in this column instead.

    Column 4: HP : Whether this cluster appears to be hairpin-derived or
    not. If not, a "." is present. If it is a hairpin, but NOT qualified as
    a MIRNA, "HP" is indicated. MIRNAs are indicated by "MIRNA". If the run
    was in "--nohp" mode, than all entries in the column will be "ND"
    (meaning 'not determined').

    Column 5: Strand : The pre-dominant strand from which the small RNA
    emanate. If ".", no strand was called. HPs and MIRNAs always have a
    polarity, based on the hairpin's originating strand. Non-HP clusters
    have their polarity determined by the --minstrandfrac setting.

    Column 6: Frac_Wat : Fraction of mappings to the Watson (e.g. +) strand
    of the cluster. 1 means all were from Watson Strand (e.g. +), 0 means
    all were from Crick (e.g. -) strand.

    Column 7: Total : Total mappings within the cluster, either in raw
    mappings (for --raw mode) or in mappings per million mapped.

    Column 8: Uniquely Mapped Total : Total mappings derived from uniquely
    mapped reads .. e.g., those with NH:i:1. In raw mappings (for --raw
    mode) or in mappings per million mapped.

    Column 9: Rep-Total : Repeat normalized total mappings. Instead of each
    mapping counting as "1", each mapping instead counts as "1/NH", where NH
    is the total number of mappings that read had, according to the NH:i:
    tag.

    Column 10: DicerCall : If "N", the cluster was not annotated as
    dicer-derived, per options --dicermin, --dicermax, and --mindicerfrac.
    Otherwise this is a number, within the --dicermin to --dicermax size
    range, which indicates the most abundant small RNA size within the
    mappings at that cluster.

    Column 11: PhaseOffset : If "ND", phasing p-value was not calculated for
    this cluster. Otherwise, the offset is the one-based genomic position
    with which the cluster appears to be "in-phase" (based on the 5' nt of a
    sense-mapped small RNA). Phasing is always in increments identicial to
    the Dicer size call in column 9.

    Column 12: Phase_pval : If "ND", phasing p-value was not calculated for
    this cluster. Otherwise, the p-value is derived from a modified
    hypergeometric distribution, as described below.

    Column 13: Pairs : Number of base-pairs in the hairpin stems. If this is
    not a HP or MIRNA locus, "NA" is entered instead.

    Column 14 : FracPaired : Fraction of the stem nucleotides that are
    paired. If this is not a HP or MIRNA locus, "NA" is entered instead.

    Column 15 : StemLength : Defined as 0.5 * (5' arm length + 3' arm
    length). If this is not a HP or MIRNA locus, "NA" is entered instead.

    Column 16 : LoopLength : Number of nucleotides between the 5' and 3'
    stems. If this is not a HP or MIRNA locus, "NA" is entered instead.

    Column 17 : dGperStem : deltaG of the stems divided by the StemLength.
    If this is not a HP or MIRNA locus, "NA" is entered instead.

    Column 18 : FracCovHP : Fraction of the per-nucleotide coverage present
    in the originally found cluster that is located in the two arms of the
    hairpin. If this is not a HP or MIRNA locus, "NA" is entered instead.

    Column 19 : HPSizeResult : "1" indicates the number of pairs in the
    hairpin was less than or equal to maxmiRHPPairs; 0 indicates the
    opposite. If this is not a HP or MIRNA locus, "NA" is entered instead.

    Column 20 : PrecisionResult : The number of small RNA sequences in the
    stem region of the hairpin that accounted for >= 20% of the mappings. If
    this is not a HP or MIRNA locus, "NA" is entered instead.

    Column 21 : DuplexResult : The number of possible miRNA/miRNA* duplexes
    in which neither partner spanned a loop and neither partner had >
    maxmiRUnpaired number of unpaired nucleotides in the putative duplex. If
    this is not a HP or MIRNA locus, "NA" is entered instead.

    Column 22 : StarResult : The number of putative miRNA*'s that were
    actually sequenced. Values of 1 or more here indicate a MIRNA annoation.
    If this is not a HP or MIRNA locus, "NA" is entered instead.

    Column 23: Short : The total mappings from reads with lengths less than
    --dicermin, either in raw reads (--raw mode), or mappings per million
    mapped.

    Column 24: Long : The total mappings from reads with lengths more than
    --dicermax, either in raw reads (--raw mode), or mappings per million
    mapped.

    Columns 25 - the end : The total mappings from reads with the indicated
    lengths. These are the sizes within the Dicer range.

  Log.txt

    This is a simple log file which records most of the information that is
    also sent to STDERR during the run.

  ShortStack.bed

    This is a .bed file for viewing the clusters on a genome browser. It
    follows the .bed specification given at the UCSC broswer site
    <http://genome.ucsc.edu/FAQ/FAQformat.html>. Clusters are color-coded
    based on the dominant size. Non-Dicer clusters are always dark gray.
    Dicer-clusters are RGB-rainbow colored from red (shortest) to green
    (middle) to blue (longest). Note that the bed coordinate system is
    zero-based, and the 'stop' coordinate is the first nt NOT in the
    interval. So, a 100 nt interval beginning at base 1 and ending at base
    100 would have a start of 0 and a stop of 100 in the bed file.

    Hairpins and MIRNAs are graphically indicated: The helical arms will be
    shown as thick boxes, and the rest of the cluster will be thin lines.

  miRNA_summary.txt

    This is a tab-delimited text file that summarizes key features of the
    loci annotated as MIRNAs, including mature miRNA sequences, miRNA-star
    sequences, and the numbers of mappings for each and for the entire
    locus.

  Hairpin and MIRNA detail files

    Unless the run was done in --nohp mode, each annotated hairpin-derived
    and MIRNA locus will have its own simple text file to display the
    details of the locus. These text files all show A) the Name and genomic
    coordinates of the locus, B) the sequence, in RNA form, C) the
    identified hairpin structure, in dot-bracket notation, and D) all
    mappings whose start and stop is within the interval being examined.

    Reads mapped to the sense strand (sense relative to the hairpin, not
    necessarily relative to the genome) have "."s as placeholders and are
    shown in the 5'-->3' orientation. Reads mapped to the antisense strand
    (antisense relative to the hairpin, not necessarily relative to the
    genome) have "<"s as placeholders, and are written in the 3' --> 5'
    orientation. Annotated mature miRNAs have "m"s as placeholders, and
    annotated miRNA*'s have "*"s as placeholders.

    After each read, the read length (l) and the number of mappings (m) is
    shown. Unless the program was run in --raw mode, the normalized mappings
    per million mapped reads (mmmr) is also shown.

    Note that alignments for very complex HP loci are suppressed (only the
    sequence and structure will be displayed in the detail file, along with
    a note indicating the alignment was suppressed). This has a major impact
    on reducing the memory footprint of ShortStack. In addition, since the
    alignments are meant for visual inspection, very complex alignments
    aren't really parseable by eye anyway. Complex loci are defined as those
    where the hairpin is longer than 400nts AND/OR has more than 400
    distinct small RNA sequences. All MIRNA loci have the alignments
    presented, regardless of whether it is complex or not.

KEY METHODS
  de novo Cluster Discovery

    Cluster discovery proceeds in two simple steps:

    1. The total depth of small RNA coverage at each occupied nucleotide in
    the genome is examined, and initial 'islands' of coverage are defined as
    continuous stretches where the read depth is greater than or equal to
    the threshold depth specified by option --mindepth. Note that islands
    could theoretically be as small as one nucleotide, since they depend on
    total depth of coverage, not the small RNA length per se. Many islands
    will often be 20-24nts in length, corresponding to a pile of a single
    small RNA species.

    2. The initial islands are then temporarily extended on both sides by
    the distance specified by option --pad. Islands that overlap after
    extension are merged. The "dangling pads" at the ends of the merged
    clusters are then removed. After all extensions, resultant mergers, and
    end trimmings are performed, the final result is the initial clusters.
    If the run is performed in --nohp mode, these are the final clusters. If
    hairpins and MIRNAs are being examined, some of the clusters may be
    adjusted in position to fully capture the putative hairpin(s) (see
    below).

  Hairpin and MIRNA analysis

    1. Clusters are first filtered to determine eligbility for secondary
    structure analysis. Only clusters whose uniqueness index* is >=
    [--minUI] are eligible. In addition, clusters with a DicerCall of "N"
    are excluded from folding analysis. (Uniqueness index is the ratio of
    repeat-normalized abundance / total mappings at the locus. Values
    approaching zero indicate a cluster dominated by multimapped reads.
    Values approaching 1 indicate most mapped reads at a locus are uniquely
    placed).

    2. The genomic window to be subject to RNA folding is first determined.
    If the locus size is > --maxhpsep, no RNA folding will take place at the
    locus. Otherwise, a window with length of --maxhpsep is centered on the
    locus to determine the nucleotides to fold

    3. Both the top and bottom genomic strands from the window are then
    subjected to secondary structure prediction using RNALfold (option -L
    [--maxhpsep]), which returns a diverse set of often overlapping
    predicted structures.

    4. The structures are parsed, retaining only those that satisfy options
    --minfracpaired, --minntspaired, --maxLoopLength, amd --maxdGperStem.

    5. If an .inv file was provided, all inverted repeats in that file are
    parsed, and then filtered to also satisfy options --minfracpaired,
    --minntspaired, --maxLoopLength, amd --maxdGperStem. In addition, loop
    lengths from einverted data are not allowed to be longer than 50% of the
    helix length of the putative hairpin. Putative RNA secondary structures
    in dot-bracket notation are generated from the .inv alignment, not by
    actual RNA thermodynamic analysis. All G-U alignments are considered
    paired, in addition to the standard A-U and G-C pairings. Both strands
    are used, subject to passing the --minfracpaired, --minntspaired,
    --maxLoopLength, amd --maxdGperStem criteria. Inverted-repeats that
    survive these filters are then filtered to retain only those with
    overlap to the original set of structure-eligible clusters (see 1
    above), and the resulting set of eniverted-derived hairpins is merged
    with the RNALfold-derived set.

    6. Redundant hairpins are then removed. Redundant hairpins are those
    whose 5' arms and 3' arms overlap. In pairwise comparisons of redundant
    hairpins, the longest hairpin is retained.

    7. Hairpins that don't have overlap with the original cluster are then
    removed. Because the folding window could have been extended around the
    cluster, there could be putative hairpins that are not within the
    original cluster. To have overlap, at least one of the hairpin's helical
    arms must have at least 1nt within the original cluster coordinates.

    8. The pattern of small RNA expression relative to the remaining
    hairpins is then examined. The per-nucleotide coverage across every
    base, on both strands separately, across the original locus coordinates
    is calculated. If there is a single hairpin whose 5' and 3' arms contain
    >= [--minfrachpdepth] of the total coverage of the original locus, the
    hairpin is kept for futher analysis. If more than one hairpin meets this
    criterion, than the one with the highest coverage fraction in the arms
    is retained. Note that this step contains a correction for reads that
    are "dyads" .. reads that map twice to a hairpin, once in each arm, on
    opposite strands... this happens for perfect inverted repeat loci. Such
    reads are counted towards the sense strand only for a given hairpin.

    9. The pattern of small RNA expression relative to the single hairpin
    candidate is further scrutinized for polarity. The fraction of all
    mappings in the hairpin interval must be >= [--minstrandfrac]. As in
    step 8, this step corrects for "dyad" reads (see above). Hairpins that
    pass this step are either HP or MIRNA loci. The coordinates of the
    originally determined de novo locus are discarded, and replaced with the
    hairpin coordinates.

    10. Each potential hairpin that remains is next analyzed to see if it
    qualifies as a MIRNA. MIRNA locus annotation is designed to satisfy the
    criteria for de novo annotation of plant MIRNAs as described in Meyers
    et al. (2008) Plant Cell 20:3186-3190. PMID: 19074682. In fact,
    ShortStack's criteria is a little stricter than Meyers et al., in that
    ShortStack has an absolute requirement for sequencing of the exact
    predicted miRNA* sequence for a candidate mature miRNA. It is important
    to note that ShortStack's MIRNA annotation method is designed to reduce
    false positives at the expense of an increased rate of false negatives.
    In other words, there are likely many bona fide MIRNA loci that end up
    being classified as Hairpins, instead of MIRNAs, because they don't
    quite meet the strict criteria set forth below.

    - Hairpin Size: The total number of pairs in the hairpin must be <=
    [--maxmiRHPPairs]

    - Precision: There must be at least one candidate mature miRNA that
    comprises at least 20% of the total abundance of small RNAs mapped to
    the hairpin.

    - Duplex: Both partners in a candidate miRNA/miRNA* duplex must not span
    any loops (i.e. neither is allowed to have base-pairs to itself). In
    addition, there must be <= [--maxmiRUnpaired] unpaired mature miRNA nts
    in the miRNA/miRNA* duplex, and <= [--maxmiRUnpaired] unpaired miRNA*
    nts in the miRNA/miRNA* duplex.

    - Star: The exact predicted miRNA*s of candidate miRNAs must have at
    least one mapped read, and the total abundance of any candidate mature
    miRNA/miRNA* pair must be at least 25% of the total small RNA abundance
    at the locus. Finally, redundant candidate mature miRNAs are removed, as
    the steps above initially might classify a small RNA as both a miRNA*
    and mature miRNA. In such cases, the partner with the higher abundance
    is called the miRNA, the other the miRNA*.

    Hairpin loci passing all four of these loci are annotated as MIRNAs.
    Those failing one or more are reported as HP loci instead.

  Quantification of clusters

    All mappings with at lease one nt of overlap within the cluster are
    tallied as being within the cluster. Thus, for a cluster located at
    Chr1:1000-2000, reads mapped to 980-1000, 1100-1123, and 2000-2021 are
    all counted as being within the cluster during quantification. Note that
    it's possible to count the same mapping within non-overlapping clusters.

  Analysis of Phasing

    'Phasing' describes the periodic mapping of small RNAs to repeating
    intervals equal to their size. It occurs when helical RNA is Diced
    processively from a defined terminus; often the terminus is defined by a
    prior small RNA slicing event followed by RDRP activity, although some
    MIRNA hairpins are also phased. Nearly all documented examples of phased
    small RNA production (in plants) occur for 21nt small RNAs in 21nt
    increments, hence the default settings of ShortStack to examine only
    21-dominated clusters. This can be changed with option --phasesize.

    ShortStack's basic method to identify phased small RNAs involves
    calculation of a p-value based on the hypergeometric distribution --
    this approach was inspired by Chen et al. (2007) PNAS 104: 3318-3323
    PMID: 17360645. However, ShortStack's method modifies the Chen et al.
    approach to make it more robust at detecting phasing in highly expressed
    clusters with a background of non-phased noise; the method also allows
    phasing analysis in any register within the dicer size range (controlled
    by option --phasesize), and analyzes regions of arbitrary length.
    Finally, ShortStack's analysis of phasing is "fuzzy" -- that it, exactly
    phased reads, and those +1 and -1 phase are all counted as "phased".

    Phasing analysis proceeds as follows:

    1. Clusters to be analyzed must be annotated as Dicer-derived and be
    dominated by the size class indicated by option --phasesize. If
    --phasesize is set to 'all', all clusters within the Dicer size range
    will be analyzed. Conversely, phasing analysis is suppressed for all
    clusters if option --phasesize is set to 'none'.

    2. Cluster must also have a length of more than 4 x the phase size in
    question .. so, more than 84nts under the default --phasesize 21
    setting. Clusters that are too short are never examined.

    3. Phasing is only analyzed with respect to the dominant size of the
    cluster. So, for a cluster dominated by 21mers, only phasing in 21nt
    increments will be examined.

    4. The 5' positions of all sense-mapped small RNAs are tallied as a
    function of genomic position. The 3' positions of all antisense-mapped
    small RNAs are also tallied, after adding 2nts to account for the 2nt,
    3' overhangs left by Dicer processing. After this process, each genomic
    position within the cluster has a number reflecting the number of small
    RNA termini at that position. If the cluster is longer than 20 times the
    phase (e.g. 20 x 21 for the default settings), reads mapped beyond the
    20 x 21 mark are allocated to the beginning of the cluster, keeping it
    in phase. For instance, assuming --phasesize of 21, reads in position
    420 are assigned at 420, those at 421 get flipped back to 1, 422 back to
    2, and so on. This is necessary because p-value calculation involved
    calculation of binomial coefficents, which grow too large to calculate
    (easily) with inputs of more than 500 or so.

    5. The average abundance of termini across the locus is calculated from
    the above representation of the reads.

    6. The total abundance in each of the possible phasing registers (there
    are 21 registers in the default mode of --phasesize 21) is calculated.
    The register with the maximum total abundance is the used in p-value
    determination. The offset of this register is also noted; the offset is
    the 1st genomic position representing the 5'-sense position of a phased
    small RNA.

    7. The p-value within the chosen register is then calculated using the
    cumulative distribution function (CDF) for the hypergeometric
    distribution. Sorry, hard to show equations in plain-text -- see
    Wikipedia's Hypergeometric distribution entry, under CDF. N (the
    population size) is the number of nt positions in the locus. m (the
    number of success states in the population) is the number of possible
    positions in the phasing register of interest, INLCUDING POSITIONS +1
    AND -1 RELATIVE TO THE REGISTER OF INTEREST. This means phasing is
    "fuzzy", which is often seen in the known examples of this phenomenon. n
    (the number of draws) is defined as the total number of positions with
    ABOVE AVERAGE abundance. k (the number of successes) is the number of
    phased positions (inlduing the fuzzy +1 and -1 positions) with ABOVE
    AVERAGE abundance. The p-value is then calculated per the hypergeometric
    distribution CDF. NOTE: The restriction of n and k to only above-average
    abundance works well to eliminate low-level noise and focus on the
    dominant small RNA pattern within the locus.

    Note: P-values are not corrected for multiple-testing. Consider
    adjustment of p-values to control for multiple testing (e.g. Bonferroni,
    Benjamini-Hochberg FDR, etc) if you want a defensible set of phased loci
    from a genome-wide analysis.

